{
    "collab_server" : "",
    "contents" : "# TF 17/05/18\n# Creating an interactive map to show how to visualise licensed doctor gender data for UK countries \n\n####\n# Psuedocode ----\n# 1. Load libraries\n# 2. Load shapefiles and filter for UK countries \n# 3. Load doctor data and clean \n# 4. Join data to map\n# 5. Build map components and final map \n####\n\n####\n# 1. Load libraries ----\nlibrary(leaflet); library(geojsonio); library(rgdal); library(sp);\nlibrary(dplyr); library(plyr); library(data.table); library(RColorBrewer);\nlibrary(raster); library(ggplot2); library(rgeos); library(readr);\nlibrary(mapproj); library(tictoc); library(ggmap); library(maps);\nlibrary(ggthemes); library(htmlwidgets); library(tidyr);\n####\n# 2. Load shapefiles and filter for UK countries ----\n\n# All shapefiles for whole world \nworld_world_countries_shapefile <- shapefile(\"shapefiles/ne_10m_admin_0_map_units.shp\")\n\n# Just a test to view the world shapefiles\n# plot(world_countries_shapefile)\n\n# One way to filter countries is by starting letter of country\nuk_countries = subset(world_world_countries_shapefile, SUBUNIT %like% \"England\" | \n                        SUBUNIT%like% \"Wales\" |\n                        SUBUNIT %like% \"Scotland\" |\n                        SUBUNIT %like% \"Northern Ireland\")\n\n# Not sure if this actually helps run the code, but seems to work\nuk_countries <- spTransform(uk_countries, CRS(\"+proj=longlat +ellps=WGS84\"))\n\n####\n# 3. Load doctor data and clean ----\n\n# Read in data\ndoctor_data <- read.csv(\"data/doctors.csv\")\n\n# Select only 2017 data, necessary variables and put in wide format\ndoctor_data %>% \n  dplyr::filter(Year == 2017) %>% \n  dplyr::select(Country, Gender, Year, Number) %>%\n  tidyr::spread(Gender, Number) -> doctor_data\n\n# Remove comma's from numbers and specify as numeric\ndoctor_data$Male <- as.numeric(sub(\",\", \"\", doctor_data$Male, fixed = TRUE))\ndoctor_data$Female <- as.numeric(sub(\",\", \"\", doctor_data$Female, fixed = TRUE))\n\n# Analyse which gender has the greatest number of doctors per country and print statement\n# and add proportions based on total per country (assuming total is male plus female which isn't the case in real life)\ndoctor_data %>%\n  mutate(majority_gender = ifelse(Male > Female, \"Majority of doctors are male\", \n                           ifelse(Female > Male, \"Majority of doctors are female\", \"Gender Equality\")))  %>%\n  mutate(total = Male + Female) %>%\n  mutate(Male_prop = (Male / total)*100) %>%\n  mutate(Female_prop = (Female / total)*100) -> doctor_data\n\n# Round proportions to 2.d.p\ndoctor_data$Male_prop <- format(round(doctor_data$Male_prop, 2), nsmall = 2)\ndoctor_data$Female_prop <- format(round(doctor_data$Female_prop, 2), nsmall = 2)\n\n# General tidying\ndoctor_data$Country <- as.character(doctor_data$Country)\ndoctor_data <- droplevels(doctor_data)\ndoctor_data$majority_gender <- as.factor(doctor_data$majority_gender)\n\n####\n# 4. Join data to map ----\ndata_for_mapping <- sp::merge(uk_countries,\n                              doctor_data,\n                              by.x = 'SUBUNIT',\n                              by.y = 'Country',\n                              duplicateGeoms = TRUE)\n\nleaflet(data_for_mapping) %>%\n  addPolygons()\n\n\n\n\n####\n# 5. Build map components and final map ----\n\n# Add fill colours for shapefiles based on a value, e.g. gender\nmap_pal = colorFactor(c('purple', '#4169e1'), data_for_mapping$majority_gender)\n\n# Some text that will appear when we hover over each shapefile,\n# this is data which will be wrapped in HTML to generate the tooltip effect \nhoverText <- sprintf(\"<div style='font-size:12px;width:200px;float:left'>\n                     <span style='font-size:18px;font-weight:bold'>%s</span><br/> \n                     <div style='width:95%%'>\n                     <span style='float:left'>Male</span>\n                     <span style='float:right'>Female</span>\n                     <br/>\n                     <span style='color:black;float:left'>%s%%</span>\n                     <span style='color:black;float:right'>%s%%</span><br clear='all'/>\n                     <span style='background:#D4DCF7;width:%s%%;float:left'>&nbsp;</span>\n                     <span style='background:#E7CCFC;width:%s%%;float:right'>&nbsp;</span>\n                     </div>\n                     <br/><span style='font-size:10px'>%s</span>\n                     </div>\",\n                     data_for_mapping$SUBUNIT, \n                     data_for_mapping$Male_prop, data_for_mapping$Female_prop,\n                     data_for_mapping$Male_prop, data_for_mapping$Female_prop,\n                     data_for_mapping$majority_gender) %>%\n  lapply(htmltools::HTML)\n\n# Bringing it all together and generating the map \nleaflet(data_for_mapping,\n        options=leafletOptions(attributionControl = FALSE, \n                               dragging = FALSE, zoomControl = FALSE, minZoom = 5.2, maxZoom = 5.2)) %>%\n  addPolygons(fillColor=~map_pal(data_for_mapping$majority_gender),\n              weight = 1,\n              label = ~hoverText,\n              color = \"grey\",\n              labelOptions = labelOptions(\n                offset = c(-100,-140),\n                #direction='bottom',\n                textOnly = T,\n                style=list(\n                  'background'='rgba(255,255,255,0.95)',\n                  'border-color' = 'rgba(0,0,0,1)',\n                  'border-radius' = '4px',\n                  'border-style' = 'solid',\n                  'border-width' = '4px')),\n              highlightOptions = highlightOptions(weight = 3, bringToFront = TRUE)) %>%\n  setMaxBounds(lat1 = 60, lng1 = 8.05, lat2 = 50, lng2 = -15.) %>%\n  htmlwidgets::onRender(\n    \"function(el, t) {\n    var myMap = this;\n    // get rid of the ugly grey background\n    myMap._container.style['background'] = '#ffffff';\n    }\") \n    \n\n\n",
    "created" : 1518364439500.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "4|13|12|4|\n13|20|19|4|\n20|49|37|4|\n38|32|71|4|\n",
    "hash" : "1678547446",
    "id" : "3E244E53",
    "lastKnownWriteTime" : 1526581871,
    "last_content_update" : 1526581875724,
    "path" : "~/Documents/R Analysis/Projects/tomfranklin-leaflet-doctors-uk/leaflet-mapping-doctors-uk.R",
    "project_path" : "leaflet-mapping-doctors-uk.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}